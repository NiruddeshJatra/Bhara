# Generated by Django 5.2 on 2025-05-29 08:07

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Product title', max_length=255)),
                ('category', models.CharField(choices=[('photography_videography', 'Photography & Videography'), ('sports_outdoor', 'Sports & Outdoor'), ('camping_hiking', 'Camping & Hiking'), ('travel_luggage', 'Travel & Luggage'), ('event_party', 'Event & Party'), ('fashion_accessories', 'Fashion & Accessories'), ('electronics', 'Electronics'), ('tools_equipment', 'Tools & Equipment'), ('musical_instruments', 'Musical Instruments'), ('other', 'Other')], help_text='Product category', max_length=255)),
                ('product_type', models.CharField(choices=[('camera', 'photography_videography'), ('lens', 'photography_videography'), ('gimbal', 'photography_videography'), ('tripod', 'photography_videography'), ('drone', 'photography_videography'), ('lighting', 'photography_videography'), ('video_camera', 'photography_videography'), ('microphone', 'photography_videography'), ('stabilizer', 'photography_videography'), ('slider', 'photography_videography'), ('reflector', 'photography_videography'), ('monitor', 'photography_videography'), ('memory_card', 'photography_videography'), ('battery', 'photography_videography'), ('charger', 'photography_videography'), ('light_stand', 'photography_videography'), ('softbox', 'photography_videography'), ('backdrop', 'photography_videography'), ('cricket_bat', 'sports_outdoor'), ('football', 'sports_outdoor'), ('badminton_racket', 'sports_outdoor'), ('helmet', 'sports_outdoor'), ('sports_gear', 'sports_outdoor'), ('running_shoes', 'sports_outdoor'), ('bicycle', 'sports_outdoor'), ('skipping_rope', 'sports_outdoor'), ('backpack', 'camping_hiking'), ('headlamp', 'camping_hiking'), ('gas_can', 'camping_hiking'), ('raincover', 'camping_hiking'), ('poncho', 'camping_hiking'), ('jacket', 'camping_hiking'), ('sleeping_bag', 'camping_hiking'), ('tent', 'camping_hiking'), ('stove', 'camping_hiking'), ('water_bottle', 'camping_hiking'), ('hiking_pole', 'camping_hiking'), ('camping_chair', 'camping_hiking'), ('suitcase', 'travel_luggage'), ('travel_adapter', 'travel_luggage'), ('power_bank', 'travel_luggage'), ('travel_bag', 'travel_luggage'), ('trolley', 'travel_luggage'), ('sound_system', 'event_party'), ('decorations', 'event_party'), ('chair', 'event_party'), ('table', 'event_party'), ('stage_light', 'event_party'), ('projector', 'event_party'), ('tent', 'event_party'), ('formal_wear', 'fashion_accessories'), ('jewelry', 'fashion_accessories'), ('costume', 'fashion_accessories'), ('watch', 'fashion_accessories'), ('sunglasses', 'fashion_accessories'), ('laptop', 'electronics'), ('tablet', 'electronics'), ('smartphone', 'electronics'), ('projector', 'electronics'), ('speaker', 'electronics'), ('tv', 'electronics'), ('printer', 'electronics'), ('scanner', 'electronics'), ('router', 'electronics'), ('power_tools', 'tools_equipment'), ('hand_tools', 'tools_equipment'), ('measuring_tape', 'tools_equipment'), ('drill_machine', 'tools_equipment'), ('ladder', 'tools_equipment'), ('cleaning_equipment', 'tools_equipment'), ('guitar', 'musical_instruments'), ('keyboard', 'musical_instruments'), ('harmonium', 'musical_instruments'), ('tabla', 'musical_instruments'), ('microphone', 'musical_instruments'), ('amplifier', 'musical_instruments'), ('drum', 'musical_instruments'), ('violin', 'musical_instruments'), ('other', 'other')], help_text='Product type', max_length=255)),
                ('description', models.TextField(help_text='Product description')),
                ('location', models.CharField(help_text='Product location', max_length=255)),
                ('security_deposit', models.PositiveIntegerField(blank=True, help_text='Security deposit amount (optional)', null=True)),
                ('purchase_year', models.DateField(help_text='Year of purchase')),
                ('purchase_price', models.PositiveIntegerField(help_text='Original purchase price')),
                ('ownership_history', models.CharField(choices=[('firsthand', 'First Hand'), ('secondhand', 'Second Hand')], help_text='Product ownership history', max_length=255)),
                ('status', models.CharField(choices=[('draft', 'Draft - Pending Review'), ('active', 'Active - Available for Rent'), ('maintenance', 'Under Maintenance - Needs Action'), ('suspended', 'Suspended - Listing Disabled')], default='draft', help_text='Product status', max_length=255)),
                ('status_message', models.TextField(blank=True, help_text='Status update message', null=True)),
                ('status_updated_at', models.DateTimeField(blank=True, help_text='Last status update timestamp', null=True)),
                ('views_count', models.PositiveIntegerField(default=0, help_text='Number of views')),
                ('rental_count', models.PositiveIntegerField(default=0, help_text='Number of rentals')),
                ('average_rating', models.DecimalField(blank=True, decimal_places=2, help_text='Average rating (0-5)', max_digits=3, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PricingTier',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('duration_unit', models.CharField(choices=[('day', 'Per Day'), ('week', 'Per Week'), ('month', 'Per Month')], help_text='Rental duration unit (day/week/month)', max_length=255)),
                ('base_price', models.PositiveIntegerField(help_text='Base price for the rental period')),
                ('max_period', models.PositiveIntegerField(blank=True, help_text='Maximum rental period (optional)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pricing_tiers', to='advertisements.product')),
            ],
            options={
                'verbose_name': 'Pricing Tier',
                'verbose_name_plural': 'Pricing Tiers',
                'ordering': ['duration_unit', 'base_price'],
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('image', models.ImageField(help_text='Upload product images (max 5MB, formats: jpeg, png, gif)', upload_to='product_images/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='advertisements.product')),
            ],
            options={
                'verbose_name': 'Product Image',
                'verbose_name_plural': 'Product Images',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='UnavailablePeriod',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('single_date', models.DateField(blank=True, help_text='Single unavailable date', null=True)),
                ('is_range', models.BooleanField(default=False, help_text='Whether this is a date range')),
                ('range_start', models.DateField(blank=True, help_text='Start date of unavailable period', null=True)),
                ('range_end', models.DateField(blank=True, help_text='End date of unavailable period', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unavailable_periods', to='advertisements.product')),
            ],
            options={
                'verbose_name': 'Unavailable Period',
                'verbose_name_plural': 'Unavailable Periods',
                'ordering': ['-range_start', '-single_date'],
            },
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['status'], name='advertiseme_status_3ed8c6_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category'], name='advertiseme_categor_3c4e6e_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['product_type'], name='advertiseme_product_ea1fd7_idx'),
        ),
        migrations.AddConstraint(
            model_name='pricingtier',
            constraint=models.UniqueConstraint(fields=('product', 'duration_unit'), name='unique_duration_unit_per_product'),
        ),
        migrations.AlterUniqueTogether(
            name='pricingtier',
            unique_together={('product', 'duration_unit')},
        ),
    ]
