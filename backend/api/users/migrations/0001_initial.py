# Generated by Django 5.2 on 2025-05-17 19:31

import django.contrib.auth.password_validation
import django.utils.timezone
import users.validators
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active.  Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_verified', models.BooleanField(default=False, help_text='Designates whether this user has completed the email verification process to allow login.', verbose_name='verified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True, validators=[users.validators.validate_email])),
                ('username', models.CharField(max_length=30, unique=True, validators=[users.validators.validate_username])),
                ('password', models.CharField(max_length=128, validators=[django.contrib.auth.password_validation.validate_password])),
                ('is_trusted', models.BooleanField(default=False)),
                ('phone_number', models.CharField(max_length=15, unique=True, validators=[users.validators.validate_phone_number])),
                ('date_of_birth', models.DateField(blank=True, null=True, validators=[users.validators.validate_date_of_birth])),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/', validators=[users.validators.validate_image_file])),
                ('bio', models.TextField(blank=True)),
                ('location', models.CharField(blank=True, max_length=100)),
                ('email_verification_token', models.CharField(blank=True, max_length=255, null=True)),
                ('national_id', models.CharField(max_length=10, unique=True, validators=[users.validators.validate_national_id])),
                ('national_id_front', models.ImageField(blank=True, null=True, upload_to='national_id_front_images/', validators=[users.validators.validate_image_file])),
                ('national_id_back', models.ImageField(blank=True, null=True, upload_to='national_id_back_images/', validators=[users.validators.validate_image_file])),
                ('marketing_consent', models.BooleanField(default=False)),
                ('profile_completed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('average_rating', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
